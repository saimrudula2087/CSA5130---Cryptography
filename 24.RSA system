def gcd_extended(a, b):
    if a == 0:
        return b, 0, 1
    gcd, x1, y1 = gcd_extended(b % a, a)
    x = y1 - (b // a) * x1
    y = x1
    return gcd, x, y

def mod_inverse(e, phi):
    gcd, x, _ = gcd_extended(e, phi)
    if gcd != 1:
        raise Exception("Modular inverse doesn't exist")
    else:
        return x % phi

# Given values
e = 31
n = 3599

# Step 1: Factor n = 3599 → p = 59, q = 61
p = 59
q = 61

# Step 2: Compute φ(n)
phi = (p - 1) * (q - 1)  # 58 * 60 = 3480

# Step 3: Compute private key d
d = mod_inverse(e, phi)

# Output
print("Public Key (e, n):", (e, n))
print("Private Key d:", d)
