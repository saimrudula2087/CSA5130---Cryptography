def create_playfair_matrix(key):
    key = key.upper().replace("J", "I")
    matrix = []
    used = set()

    for char in key:
        if char.isalpha() and char not in used:
            used.add(char)
            matrix.append(char)

    for i in range(26):
        ch = chr(i + ord('A'))
        if ch == 'J':
            continue
        if ch not in used:
            used.add(ch)
            matrix.append(ch)

    return [matrix[i*5:(i+1)*5] for i in range(5)]

def find_position(matrix, letter):
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == letter:
                return i, j
    return None

def decrypt_playfair(ciphertext, key):
    matrix = create_playfair_matrix(key)
    plaintext = ""
    ciphertext = ciphertext.upper().replace("J", "I").replace(" ", "").replace("\n", "")

    i = 0
    while i < len(ciphertext):
        a = ciphertext[i]
        b = ciphertext[i+1] if i+1 < len(ciphertext) else 'X'

        row1, col1 = find_position(matrix, a)
        row2, col2 = find_position(matrix, b)

        if row1 == row2:
            plaintext += matrix[row1][(col1 - 1) % 5]
            plaintext += matrix[row2][(col2 - 1) % 5]
        elif col1 == col2:
            plaintext += matrix[(row1 - 1) % 5][col1]
            plaintext += matrix[(row2 - 1) % 5][col2]
        else:
            plaintext += matrix[row1][col2]
            plaintext += matrix[row2][col1]
        
        i += 2

    return plaintext

# === Decrypt given message ===

key = "MONARCHY"  # Historical Playfair key
ciphertext = """KXJEY UREBE ZWEHE WRYTU HEYFS
KREHE GOYFI WTTTU OLKSY CAJPO
BOTEI ZONTX BYBNT GONEY CUZWR
GDSON SXBOU YWRHE BAAHY USEDQ"""

decrypted = decrypt_playfair(ciphertext, key)
print("Decrypted message:\n", decrypted)
