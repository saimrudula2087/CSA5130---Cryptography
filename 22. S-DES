def permute(bits, order):
    return [bits[i] for i in order]

def left_shift(bits, n):
    return bits[n:] + bits[:n]

def xor(bits1, bits2):
    return [b1 ^ b2 for b1, b2 in zip(bits1, bits2)]

def to_bits(s):
    return [int(b) for b in format(s, '08b')]

def from_bits(bits):
    return int(''.join(str(b) for b in bits), 2)

# S-boxes
S0 = [
    [1, 0, 3, 2],
    [3, 2, 1, 0],
    [0, 2, 1, 3],
    [3, 1, 3, 2]
]

S1 = [
    [0, 1, 2, 3],
    [2, 0, 1, 3],
    [3, 0, 1, 0],
    [2, 1, 0, 3]
]

# Permutations
P10 = [2, 4, 1, 6, 3, 9, 0, 8, 7, 5]
P8  = [5, 2, 6, 3, 7, 4, 9, 8]
IP  = [1, 5, 2, 0, 3, 7, 4, 6]
IP_INV = [3, 0, 2, 4, 6, 1, 7, 5]
EP = [3, 0, 1, 2, 1, 2, 3, 0]
P4 = [1, 3, 2, 0]

def s_box_lookup(bits, sbox):
    row = (bits[0] << 1) | bits[3]
    col = (bits[1] << 1) | bits[2]
    val = sbox[row][col]
    return [int(b) for b in format(val, '02b')]

def f_k(bits, key):
    left, right = bits[:4], bits[4:]
    right_expanded = permute(right, EP)
    temp = xor(right_expanded, key)
    s0 = s_box_lookup(temp[:4], S0)
    s1 = s_box_lookup(temp[4:], S1)
    p4 = permute(s0 + s1, P4)
    return xor(left, p4) + right

def switch(bits):
    return bits[4:] + bits[:4]

def key_generation(key_bits):
    p10 = permute(key_bits, P10)
    left = left_shift(p10[:5], 1)
    right = left_shift(p10[5:], 1)
    k1 = permute(left + right, P8)

    left = left_shift(left, 2)
    right = left_shift(right, 2)
    k2 = permute(left + right, P8)
    return k1, k2

def sdes_encrypt_block(block, k1, k2):
    bits = permute(block, IP)
    temp = f_k(bits, k1)
    temp = switch(temp)
    temp = f_k(temp, k2)
    return permute(temp, IP_INV)

def sdes_decrypt_block(block, k1, k2):
    bits = permute(block, IP)
    temp = f_k(bits, k2)
    temp = switch(temp)
    temp = f_k(temp, k1)
    return permute(temp, IP_INV)

# CBC mode functions
def cbc_encrypt(plaintext_blocks, k1, k2, iv):
    ciphertext_blocks = []
    prev = iv
    for block in plaintext_blocks:
        xor_block = xor(block, prev)
        enc_block = sdes_encrypt_block(xor_block, k1, k2)
        ciphertext_blocks.append(enc_block)
        prev = enc_block
    return ciphertext_blocks

def cbc_decrypt(ciphertext_blocks, k1, k2, iv):
    plaintext_blocks = []
    prev = iv
    for block in ciphertext_blocks:
        dec_block = sdes_decrypt_block(block, k1, k2)
        plain_block = xor(dec_block, prev)
        plaintext_blocks.append(plain_block)
        prev = block
    return plaintext_blocks

# --- MAIN TEST ---
if __name__ == "__main__":
    # Key: 10-bit binary string
    key = [0,1,1,1,1,1,1,1,0,1]
    k1, k2 = key_generation(key)

    # IV (binary): 10101010
    iv = [1,0,1,0,1,0,1,0]

    # Plaintext blocks (2 blocks of 8 bits)
    pt1 = [0,0,0,0,0,0,0,1]
    pt2 = [0,0,1,0,0,0,1,1]
    plaintext = [pt1, pt2]

    # Encrypt
    ciphertext = cbc_encrypt(plaintext, k1, k2, iv)

    print("Ciphertext blocks:")
    for block in ciphertext:
        print("".join(str(b) for b in block))

    # Decrypt
    decrypted = cbc_decrypt(ciphertext, k1, k2, iv)

    print("\nDecrypted plaintext blocks:")
    for block in decrypted:
        print("".join(str(b) for b in block))

    # Expected ciphertext: 11110100 00001011
    expected1 = "11110100"
    expected2 = "00001011"
