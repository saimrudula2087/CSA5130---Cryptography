def create_custom_matrix():
    # Given matrix layout
    letters = [
        'M', 'F', 'H', 'I', 'K',
        'U', 'N', 'O', 'P', 'Q',
        'Z', 'V', 'W', 'X', 'Y',
        'E', 'L', 'A', 'R', 'G',
        'D', 'S', 'T', 'B', 'C'
    ]
    matrix = [letters[i*5:(i+1)*5] for i in range(5)]
    return matrix

def find_position(matrix, letter):
    if letter == 'J':  # Replace J with I
        letter = 'I'
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == letter:
                return i, j
    return None

def prepare_text(text):
    text = text.upper().replace("J", "I")
    cleaned = ''.join([c for c in text if c.isalpha()])
    i = 0
    pairs = []

    while i < len(cleaned):
        a = cleaned[i]
        b = cleaned[i + 1] if (i + 1) < len(cleaned) else 'X'
        if a == b:
            pairs.append((a, 'X'))
            i += 1
        else:
            pairs.append((a, b))
            i += 2
    return pairs

def encrypt_playfair(plaintext, matrix):
    pairs = prepare_text(plaintext)
    ciphertext = ""

    for a, b in pairs:
        row1, col1 = find_position(matrix, a)
        row2, col2 = find_position(matrix, b)

        if row1 == row2:
            # Same row → move right
            ciphertext += matrix[row1][(col1 + 1) % 5]
            ciphertext += matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:
            # Same column → move down
            ciphertext += matrix[(row1 + 1) % 5][col1]
            ciphertext += matrix[(row2 + 1) % 5][col2]
        else:
            # Rectangle → swap columns
            ciphertext += matrix[row1][col2]
            ciphertext += matrix[row2][col1]

    return ciphertext

# === Input ===

matrix = create_custom_matrix()
plaintext = "Must see you over Cadogan West. Coming at once."
ciphertext = encrypt_playfair(plaintext, matrix)

print("Encrypted message:\n", ciphertext)
