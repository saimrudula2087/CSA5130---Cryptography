import string
from collections import Counter

# Expected English letter frequency order (most to least common)
ENGLISH_FREQ_ORDER = 'ETAOINSHRDLCUMWFGYPBVKJXQZ'

def clean_text(text):
    return ''.join([c.upper() for c in text if c.isalpha()])

def frequency_analysis(ciphertext):
    cleaned = clean_text(ciphertext)
    counter = Counter(cleaned)
    most_common = [pair[0] for pair in counter.most_common()]
    return most_common

def build_substitution_map(cipher_freq_order, english_freq_order):
    mapping = {}
    for c1, c2 in zip(cipher_freq_order, english_freq_order):
        mapping[c1] = c2
    return mapping

def decrypt_with_map(ciphertext, mapping):
    result = ''
    for char in ciphertext:
        if char.upper() in mapping:
            new_char = mapping[char.upper()]
            if char.islower():
                result += new_char.lower()
            else:
                result += new_char
        else:
            result += char
    return result

def monoalphabetic_attack(ciphertext, top_n=5):
    cipher_freq_order = frequency_analysis(ciphertext)
    
    # Only try top N permutations of the first few most frequent letters
    from itertools import permutations

    # Number of high-freq letters to permute (increase for better guesses)
    permute_count = 5  
    base_cipher = cipher_freq_order[:permute_count]
    base_english = ENGLISH_FREQ_ORDER[:permute_count]

    candidates = []

    for perm in permutations(base_english):
        trial_order = list(perm) + list(ENGLISH_FREQ_ORDER[permute_count:])
        trial_map = build_substitution_map(cipher_freq_order, trial_order)
        plaintext = decrypt_with_map(ciphertext, trial_map)

        # Score: count real-looking words or use letter frequency agreement
        score = score_plaintext(plaintext)
        candidates.append((score, plaintext))

    # Sort and return top N
    candidates.sort(reverse=True, key=lambda x: x[0])
    print(f"\nTop {top_n} likely plaintexts:\n")
    for i in range(min(top_n, len(candidates))):
        print(f"[#{i+1}] Score: {candidates[i][0]:.2f} | Plaintext: {candidates[i][1]}\n")

def score_plaintext(text):
    # Basic score using common English letters
    text = clean_text(text)
    counter = Counter(text)
    score = 0
    for i, char in enumerate(ENGLISH_FREQ_ORDER):
        score += counter.get(char, 0) * (26 - i)
    return score

# --- MAIN PROGRAM ---

if __name__ == "__main__":
    ciphertext = input("Enter ciphertext: ")
    top_n = int(input("How many top guesses to display? "))
    monoalphabetic_attack(ciphertext, top_n)
