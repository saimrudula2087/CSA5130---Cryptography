def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None
def decrypt_char(c, a, b):
    if c.isalpha():
        a_inv = mod_inverse(a, 26)
        if a_inv is None:
            return '?'
        c_num = ord(c.upper()) - ord('A')
        p = (a_inv * (c_num - b)) % 26
        return chr(p + ord('A'))
    return c
def decrypt_affine(ciphertext, a, b):
    plaintext = ''
    for char in ciphertext:
        plaintext += decrypt_char(char, a, b)
    return plaintext
ciphertext = "BUBUBUBUBUBUBUBUBU"
y1 = ord('B') - ord('A')  
y2 = ord('U') - ord('A')  
x1 = ord('E') - ord('A')  
x2 = ord('T') - ord('A')  
dx = (x2 - x1) % 26  
dy = (y2 - y1) % 26  
dx_inv = mod_inverse(dx, 26)
if dx_inv is None:
    print("No modular inverse for dx found. Cannot proceed.")
else:
    a = (dy * dx_inv) % 26
    b = (y1 - a * x1) % 26
    print(f"Guessed keys -> a: {a}, b: {b}")
    decrypted = decrypt_affine(ciphertext, a, b)
    print("Decrypted Text:")
    print(decrypted)
