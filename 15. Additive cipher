import string

# English letter frequencies (A-Z) in percentage
ENGLISH_FREQ = {
    'A': 8.167, 'B': 1.492, 'C': 2.782, 'D': 4.253,
    'E': 12.702, 'F': 2.228, 'G': 2.015, 'H': 6.094,
    'I': 6.966, 'J': 0.153, 'K': 0.772, 'L': 4.025,
    'M': 2.406, 'N': 6.749, 'O': 7.507, 'P': 1.929,
    'Q': 0.095, 'R': 5.987, 'S': 6.327, 'T': 9.056,
    'U': 2.758, 'V': 0.978, 'W': 2.360, 'X': 0.150,
    'Y': 1.974, 'Z': 0.074
}

def caesar_decrypt(ciphertext, key):
    result = ''
    for char in ciphertext:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')
            result += chr((ord(char) - base - key) % 26 + base)
        else:
            result += char
    return result

def compute_score(text):
    # Count frequencies
    text = text.upper()
    letter_counts = {ch: 0 for ch in string.ascii_uppercase}
    total = 0

    for ch in text:
        if ch in letter_counts:
            letter_counts[ch] += 1
            total += 1

    if total == 0:
        return 0

    # Normalize and compute dot product with English frequencies
    score = 0.0
    for ch in string.ascii_uppercase:
        freq = (letter_counts[ch] / total) * 100
        score += freq * ENGLISH_FREQ[ch]
    return score

def frequency_attack(ciphertext, top_n=5):
    candidates = []
    for key in range(26):
        decrypted = caesar_decrypt(ciphertext, key)
        score = compute_score(decrypted)
        candidates.append((score, key, decrypted))

    # Sort by score (higher is better)
    candidates.sort(reverse=True)
    print(f"\nTop {top_n} possible plaintexts:")
    for i in range(min(top_n, len(candidates))):
        score, key, text = candidates[i]
        print(f"[Key {key:2}] Score: {score:.2f} | Plaintext: {text}")

# Example usage
if __name__ == "__main__":
    ciphertext = input("Enter ciphertext: ")
    top_n = int(input("How many top guesses do you want? "))
    frequency_attack(ciphertext, top_n)
