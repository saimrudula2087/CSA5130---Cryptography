from math import gcd

# Function to compute modular inverse of 'a' under mod 26
def modinv(a, m=26):
    for i in range(1, m):
        if (a * i) % m == 1:
            return i
    raise ValueError("No modular inverse for a=%d under mod %d" % (a, m))

# Check whether 'a' is valid (coprime with 26)
def is_valid_a(a):
    return gcd(a, 26) == 1

# Encryption: C = (a*p + b) % 26
def affine_encrypt(plaintext, a, b):
    if not is_valid_a(a):
        raise ValueError("a must be coprime with 26.")
    
    ciphertext = ""
    for char in plaintext.upper():
        if char.isalpha():
            p = ord(char) - ord('A')
            c = (a * p + b) % 26
            ciphertext += chr(c + ord('A'))
        else:
            ciphertext += char
    return ciphertext

# Decryption: P = a^-1 * (C - b) % 26
def affine_decrypt(ciphertext, a, b):
    if not is_valid_a(a):
        raise ValueError("a must be coprime with 26.")
    
    a_inv = modinv(a, 26)
    plaintext = ""
    for char in ciphertext.upper():
        if char.isalpha():
            c = ord(char) - ord('A')
            p = (a_inv * (c - b)) % 26
            plaintext += chr(p + ord('A'))
        else:
            plaintext += char
    return plaintext

# Example usage
plaintext = "AFFINECIPHER"
a = 5  # Must be coprime with 26
b = 8

print("Plaintext:", plaintext)
cipher = affine_encrypt(plaintext, a, b)
print("Encrypted:", cipher)
decipher = affine_decrypt(cipher, a, b)
print("Decrypted:", decipher)
