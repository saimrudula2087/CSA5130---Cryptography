# Simplified DES decryption in Python with key schedule

# Initial permutation table
IP = [58, 50, 42, 34, 26, 18, 10, 2,
      60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6,
      64, 56, 48, 40, 32, 24, 16, 8,
      57, 49, 41, 33, 25, 17, 9, 1,
      59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5,
      63, 55, 47, 39, 31, 23, 15, 7]

# Final permutation table
FP = [40, 8, 48, 16, 56, 24, 64, 32,
      39, 7, 47, 15, 55, 23, 63, 31,
      38, 6, 46, 14, 54, 22, 62, 30,
      37, 5, 45, 13, 53, 21, 61, 29,
      36, 4, 44, 12, 52, 20, 60, 28,
      35, 3, 43, 11, 51, 19, 59, 27,
      34, 2, 42, 10, 50, 18, 58, 26,
      33, 1, 41, 9, 49, 17, 57, 25]

# Permuted Choice 1 (PC1)
PC1 = [57, 49, 41, 33, 25, 17, 9,
       1, 58, 50, 42, 34, 26, 18,
       10, 2, 59, 51, 43, 35, 27,
       19, 11, 3, 60, 52, 44, 36,
       63, 55, 47, 39, 31, 23, 15,
       7, 62, 54, 46, 38, 30, 22,
       14, 6, 61, 53, 45, 37, 29,
       21, 13, 5, 28, 20, 12, 4]

# Permuted Choice 2 (PC2)
PC2 = [14, 17, 11, 24, 1, 5,
       3, 28, 15, 6, 21, 10,
       23, 19, 12, 4, 26, 8,
       16, 7, 27, 20, 13, 2,
       41, 52, 31, 37, 47, 55,
       30, 40, 51, 45, 33, 48,
       44, 49, 39, 56, 34, 53,
       46, 42, 50, 36, 29, 32]

# Left shift schedule
SHIFT_SCHEDULE = [1, 1, 2, 2, 2, 2, 2, 2,
                  1, 2, 2, 2, 2, 2, 2, 1]

def permute(bits, table):
    return [bits[i - 1] for i in table]

def left_shift(bits, n):
    return bits[n:] + bits[:n]

def xor(bits1, bits2):
    return [b1 ^ b2 for b1, b2 in zip(bits1, bits2)]

def string_to_bitlist(s):
    return [int(b) for c in s.encode('utf-8') for b in format(c, '08b')]

def bitlist_to_string(bits):
    chars = [chr(int(''.join(str(b) for b in bits[i:i + 8]), 2)) for i in range(0, len(bits), 8)]
    return ''.join(chars)

def generate_keys(key_bits):
    key_permuted = permute(key_bits, PC1)
    C = key_permuted[:28]
    D = key_permuted[28:]
    round_keys = []
    for shift in SHIFT_SCHEDULE:
        C = left_shift(C, shift)
        D = left_shift(D, shift)
        combined = C + D
        round_key = permute(combined, PC2)
        round_keys.append(round_key)
    return round_keys

def des_decrypt(cipher_bits, round_keys):
    # 1. Initial Permutation
    bits = permute(cipher_bits, IP)
    L = bits[:32]
    R = bits[32:]

    # 2. 16 Rounds with reverse key order
    for i in range(15, -1, -1):
        L, R = R, xor(L, R)  # simplified round function: real DES uses S-box etc.

    # 3. Final permutation
    combined = R + L
    plain_bits = permute(combined, FP)
    return plain_bits

# --- Main Program ---

if __name__ == "__main__":
    # Example: 64-bit cipher text
